define("dummy/app",["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],function(e,n,t,r,i){"use strict";var o=e["default"],a=n["default"],s=t["default"],l=r["default"];o.MODEL_FACTORY_INJECTIONS=!0;var d=o.Application.extend({modulePrefix:l.modulePrefix,podModulePrefix:l.podModulePrefix,Resolver:a});s(d,l.modulePrefix),i["default"]=d}),define("dummy/components/ivy-codemirror",["ivy-codemirror/components/ivy-codemirror","exports"],function(e,n){"use strict";var t=e["default"];n["default"]=t}),define("dummy/controllers/index",["ember","dummy/config/environment","exports"],function(e,n,t){"use strict";var r=e["default"],i=n["default"];t["default"]=r.Controller.extend({lineNumbers:!0,lineWrapping:!1,mode:"javascript",readOnly:!1,smartIndent:!0,tabSize:4,theme:"ambiance",value:i.APP.codeSample,modes:r.A(["apl","asterisk","clike","clojure","cobol","coffeescript","commonlisp","css","cypher","d","diff","django","dtd","dylan","ecl","eiffel","erlang","fortran","gas","gfm","gherkin","go","groovy","haml","haskell","haxe","htmlembedded","htmlmixed","http","idl","jade","javascript","jinja2","julia","kotlin","livescript","lua","markdown","mirc","mllike","modelica","nginx","ntriples","octave","pascal","pegjs","perl","php","pig","properties","puppet","python","q","r","rpm","rst","ruby","rust","sass","scheme","shell","sieve","slim","smalltalk","smarty","smartymixed","solr","sparql","sql","stex","tcl","textile","tiddlywiki","tiki","toml","tornado","turtle","vb","vbscript","velocity","verilog","xml","xquery","yaml","z80"]),themes:r.A(["3024-day","3024-night","ambiance-mobile","ambiance","base16-dark","base16-light","blackboard","cobalt","eclipse","elegant","erlang-dark","lesser-dark","mbo","mdn-like","midnight","monokai","neat","neo","night","paraiso-dark","paraiso-light","pastel-on-dark","rubyblue","solarized","the-matrix","tomorrow-night-eighties","twilight","vibrant-ink","xq-dark","xq-light"])})}),define("dummy/initializers/export-application-global",["ember","dummy/config/environment","exports"],function(e,n,t){"use strict";function r(e,n){var t=i.String.classify(o.modulePrefix);o.exportApplicationGlobal&&(window[t]=n)}var i=e["default"],o=n["default"];t.initialize=r,t["default"]={name:"export-application-global",initialize:r}}),define("dummy/router",["ember","dummy/config/environment","exports"],function(e,n,t){"use strict";var r=e["default"],i=n["default"],o=r.Router.extend({location:i.locationType});o.map(function(){}),t["default"]=o}),define("dummy/templates/application",["exports"],function(e){"use strict";e["default"]=Ember.Handlebars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,n,t,r){var i,o="";return r.buffer.push('<div class="container">\n  '),i=n._triageMustache.call(e,"outlet",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[e],data:r}),null!=i&&r.buffer.push(i),r.buffer.push("\n</div>\n"),o},useData:!0})}),define("dummy/templates/index",["exports"],function(e){"use strict";e["default"]=Ember.Handlebars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,n,t,r){var i=n.helperMissing,o=this.escapeExpression,a="";return r.buffer.push('<h1 class="page-header">ivy-codemirror</h1>\n\n<div class="row">\n  <div class="col-sm-9">\n    '),r.buffer.push(o((n["ivy-codemirror"]||e&&e["ivy-codemirror"]||i).call(e,{name:"ivy-codemirror",hash:{value:"value",theme:"theme",smartIndent:"smartIndent",readOnly:"readOnly",mode:"mode",lineWrapping:"lineWrapping",lineNumbers:"lineNumbers"},hashTypes:{value:"ID",theme:"ID",smartIndent:"ID",readOnly:"ID",mode:"ID",lineWrapping:"ID",lineNumbers:"ID"},hashContexts:{value:e,theme:e,smartIndent:e,readOnly:e,mode:e,lineWrapping:e,lineNumbers:e},types:[],contexts:[],data:r}))),r.buffer.push('\n  </div>\n\n  <div class="col-sm-3">\n    <div class="form-group">\n      <label class="control-label" for="mode">Mode</label>\n      '),r.buffer.push(o(n.view.call(e,"select",{name:"view",hash:{value:"mode",id:"mode",content:"modes","class":"form-control"},hashTypes:{value:"ID",id:"STRING",content:"ID","class":"STRING"},hashContexts:{value:e,id:e,content:e,"class":e},types:["STRING"],contexts:[e],data:r}))),r.buffer.push('\n    </div>\n\n    <div class="form-group">\n      <label class="control-label" for="theme">Theme</label>\n      '),r.buffer.push(o(n.view.call(e,"select",{name:"view",hash:{value:"theme",id:"theme",content:"themes","class":"form-control"},hashTypes:{value:"ID",id:"STRING",content:"ID","class":"STRING"},hashContexts:{value:e,id:e,content:e,"class":e},types:["STRING"],contexts:[e],data:r}))),r.buffer.push('\n    </div>\n\n    <div class="checkbox">\n      <label>\n        '),r.buffer.push(o((n.input||e&&e.input||i).call(e,{name:"input",hash:{type:"checkbox",checked:"lineNumbers"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},types:[],contexts:[],data:r}))),r.buffer.push(' Line numbers\n      </label>\n    </div>\n\n    <div class="checkbox">\n      <label>\n        '),r.buffer.push(o((n.input||e&&e.input||i).call(e,{name:"input",hash:{type:"checkbox",checked:"lineWrapping"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},types:[],contexts:[],data:r}))),r.buffer.push(' Line wrapping\n      </label>\n    </div>\n\n    <div class="checkbox">\n      <label>\n        '),r.buffer.push(o((n.input||e&&e.input||i).call(e,{name:"input",hash:{type:"checkbox",checked:"readOnly"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},types:[],contexts:[],data:r}))),r.buffer.push(' Read-only\n      </label>\n    </div>\n\n    <div class="checkbox">\n      <label>\n        '),r.buffer.push(o((n.input||e&&e.input||i).call(e,{name:"input",hash:{type:"checkbox",checked:"smartIndent"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},types:[],contexts:[],data:r}))),r.buffer.push(" Smart indent\n      </label>\n    </div>\n  </div>\n</div>\n"),a},useData:!0})}),define("dummy/config/environment",["ember"],function(e){var n="dummy";try{var t=n+"/config/environment",r=e["default"].$('meta[name="'+t+'"]').attr("content"),i=JSON.parse(unescape(r));return{"default":i}}catch(o){throw new Error('Could not read config from meta tag with name "'+t+'".')}}),runningTests?require("dummy/tests/test-helper"):require("dummy/app")["default"].create({codeSample:"import CodeMirror from 'codemirror';\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  /**\n   * The value of the editor.\n   *\n   * @property value\n   * @type {String}\n   * @default null\n   */\n  value: null,\n\n  autofocus: false,\n  coverGutterNextToScrollbar: false,\n  electricChars: true,\n  extraKeys: null,\n  firstLineNumber: 1,\n  fixedGutter: true,\n  historyEventDelay: 1250,\n  indentUnit: 2,\n  indentWithTabs: false,\n  keyMap: 'default',\n  lineNumbers: false,\n  lineWrapping: false,\n  mode: null,\n  readOnly: false,\n  rtlMoveVisually: true,\n  showCursorWhenSelecting: false,\n  smartIndent: true,\n  tabSize: 4,\n  tabindex: null,\n  theme: 'default',\n  undoDepth: 200,\n\n  tagName: 'textarea',\n\n  /**\n   * Force CodeMirror to refresh.\n   *\n   * @method refresh\n   */\n  refresh: function() {\n    this.get('codeMirror').refresh();\n  },\n\n  _initCodemirror: Ember.on('didInsertElement', function() {\n    var codeMirror = CodeMirror.fromTextArea(this.get('element'));\n\n    // Stash away the CodeMirror instance.\n    this.set('codeMirror', codeMirror);\n\n    // Set up handlers for CodeMirror events.\n    this._bindCodeMirrorEvent('change', this, '_updateValue');\n\n    // Set up bindings for CodeMirror options.\n    this._bindCodeMirrorOption('autofocus');\n    this._bindCodeMirrorOption('coverGutterNextToScrollbar');\n    this._bindCodeMirrorOption('electricChars');\n    this._bindCodeMirrorOption('extraKeys');\n    this._bindCodeMirrorOption('firstLineNumber');\n    this._bindCodeMirrorOption('fixedGutter');\n    this._bindCodeMirrorOption('historyEventDelay');\n    this._bindCodeMirrorOption('indentUnit');\n    this._bindCodeMirrorOption('indentWithTabs');\n    this._bindCodeMirrorOption('keyMap');\n    this._bindCodeMirrorOption('lineNumbers');\n    this._bindCodeMirrorOption('lineWrapping');\n    this._bindCodeMirrorOption('mode');\n    this._bindCodeMirrorOption('readOnly');\n    this._bindCodeMirrorOption('rtlMoveVisually');\n    this._bindCodeMirrorOption('showCursorWhenSelecting');\n    this._bindCodeMirrorOption('smartIndent');\n    this._bindCodeMirrorOption('tabSize');\n    this._bindCodeMirrorOption('tabindex');\n    this._bindCodeMirrorOption('theme');\n    this._bindCodeMirrorOption('undoDepth');\n\n    this._bindCodeMirrorProperty('value', this, '_valueDidChange');\n    this._valueDidChange();\n\n    // Force a refresh on `becameVisible`, since CodeMirror won't render itself\n    // onto a hidden element.\n    this.on('becameVisible', this, 'refresh');\n  }),\n\n  /**\n   * Bind a handler for `event`, to be torn down in `willDestroyElement`.\n   *\n   * @private\n   * @method _bindCodeMirrorEvent\n   */\n  _bindCodeMirrorEvent: function(event, target, method) {\n    var callback = Ember.run.bind(target, method);\n\n    this.get('codeMirror').on(event, callback);\n\n    this.on('willDestroyElement', this, function() {\n      this.get('codeMirror').off(event, callback);\n    });\n  },\n\n  /**\n   * @private\n   * @method _bindCodeMirrorProperty\n   */\n  _bindCodeMirrorOption: function(key) {\n    this._bindCodeMirrorProperty(key, this, '_optionDidChange');\n\n    // Set the initial option synchronously.\n    this._optionDidChange(this, key);\n  },\n\n  /**\n   * Bind an observer on `key`, to be torn down in `willDestroyElement`.\n   *\n   * @private\n   * @method _bindCodeMirrorProperty\n   */\n  _bindCodeMirrorProperty: function(key, target, method) {\n    this.addObserver(key, target, method);\n\n    this.on('willDestroyElement', this, function() {\n      this.removeObserver(key, target, method);\n    });\n  },\n\n  /**\n   * Sync a local option value with CodeMirror.\n   *\n   * @private\n   * @method _optionDidChange\n   */\n  _optionDidChange: function(sender, key) {\n    this.get('codeMirror').setOption(key, this.get(key));\n  },\n\n  /**\n   * Update the `value` property when a CodeMirror `change` event occurs.\n   *\n   * @private\n   * @method _updateValue\n   */\n  _updateValue: function(instance) {\n    this.set('value', instance.getValue());\n  },\n\n  _valueDidChange: function() {\n    var codeMirror = this.get('codeMirror'),\n        value = this.get('value');\n\n    if (value !== codeMirror.getValue()) {\n      codeMirror.setValue(value || '');\n    }\n  }\n});\n"});