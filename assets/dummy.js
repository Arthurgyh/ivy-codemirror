eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/components\');\n    test(\'ember-cli-qunit/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/index.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/index.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/ivy-codemirror\", \n  [\"ivy-codemirror/components/ivy-codemirror\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var IvyCodemirrorComponent = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = IvyCodemirrorComponent;\n  });//# sourceURL=dummy/components/ivy-codemirror.js");

;eval("define(\"dummy/controllers/index\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      lineNumbers: true,\n      lineWrapping: false,\n      mode: \'javascript\',\n      readOnly: false,\n      smartIndent: true,\n      tabSize: 4,\n      theme: \'ambiance\',\n      value: config.APP.codeSample,\n\n      modes: Ember.A([\n        \'apl\', \'asterisk\', \'clike\', \'clojure\', \'cobol\', \'coffeescript\',\n        \'commonlisp\', \'css\', \'cypher\', \'d\', \'diff\', \'django\', \'dtd\', \'dylan\',\n        \'ecl\', \'eiffel\', \'erlang\', \'fortran\', \'gas\', \'gfm\', \'gherkin\', \'go\',\n        \'groovy\', \'haml\', \'haskell\', \'haxe\', \'htmlembedded\', \'htmlmixed\', \'http\',\n        \'idl\', \'jade\', \'javascript\', \'jinja2\', \'julia\', \'kotlin\', \'livescript\',\n        \'lua\', \'markdown\', \'mirc\', \'mllike\', \'modelica\', \'nginx\', \'ntriples\',\n        \'octave\', \'pascal\', \'pegjs\', \'perl\', \'php\', \'pig\', \'properties\',\n        \'puppet\', \'python\', \'q\', \'r\', \'rpm\', \'rst\', \'ruby\', \'rust\', \'sass\',\n        \'scheme\', \'shell\', \'sieve\', \'slim\', \'smalltalk\', \'smarty\', \'smartymixed\',\n        \'solr\', \'sparql\', \'sql\', \'stex\', \'tcl\', \'textile\', \'tiddlywiki\', \'tiki\',\n        \'toml\', \'tornado\', \'turtle\', \'vb\', \'vbscript\', \'velocity\', \'verilog\',\n        \'xml\', \'xquery\', \'yaml\', \'z80\'\n      ]),\n\n      themes: Ember.A([\n        \'3024-day\', \'3024-night\', \'ambiance-mobile\', \'ambiance\', \'base16-dark\',\n        \'base16-light\', \'blackboard\', \'cobalt\', \'eclipse\', \'elegant\',\n        \'erlang-dark\', \'lesser-dark\', \'mbo\', \'mdn-like\', \'midnight\', \'monokai\',\n        \'neat\', \'neo\', \'night\', \'paraiso-dark\', \'paraiso-light\',\n        \'pastel-on-dark\', \'rubyblue\', \'solarized\', \'the-matrix\',\n        \'tomorrow-night-eighties\', \'twilight\', \'vibrant-ink\', \'xq-dark\',\n        \'xq-light\'\n      ])\n    });\n  });//# sourceURL=dummy/controllers/index.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/components\');\n    test(\'ember-cli-content-security-policy/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/index.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/index.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/components\');\n    test(\'ember-data/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'ember-data/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/index.js should pass jshint\', function() { \n      ok(true, \'ember-data/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/index.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/components\');\n    test(\'ember-export-application-global/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/index.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/index.jshint.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/ivy-codemirror/tests/ivy-codemirror/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ivy-codemirror/components\');\n    test(\'ivy-codemirror/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'ivy-codemirror/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ivy-codemirror/tests/ivy-codemirror/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/ivy-codemirror/tests/ivy-codemirror/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ivy-codemirror\');\n    test(\'ivy-codemirror/index.js should pass jshint\', function() { \n      ok(true, \'ivy-codemirror/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ivy-codemirror/tests/ivy-codemirror/index.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/components/ivy-codemirror.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/components\');\n    test(\'live-reload-middleware/components/ivy-codemirror.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/components/ivy-codemirror.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/components/ivy-codemirror.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/index.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/index.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<div class=\\\"container\\\">\\n  \");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h1 class=\\\"page-header\\\">ivy-codemirror</h1>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-9\\\">\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'ivy-codemirror\'] || (depth0 && depth0[\'ivy-codemirror\']),options={hash:{\n        \'lineNumbers\': (\"lineNumbers\"),\n        \'lineWrapping\': (\"lineWrapping\"),\n        \'mode\': (\"mode\"),\n        \'readOnly\': (\"readOnly\"),\n        \'smartIndent\': (\"smartIndent\"),\n        \'theme\': (\"theme\"),\n        \'value\': (\"value\")\n      },hashTypes:{\'lineNumbers\': \"ID\",\'lineWrapping\': \"ID\",\'mode\': \"ID\",\'readOnly\': \"ID\",\'smartIndent\': \"ID\",\'theme\': \"ID\",\'value\': \"ID\"},hashContexts:{\'lineNumbers\': depth0,\'lineWrapping\': depth0,\'mode\': depth0,\'readOnly\': depth0,\'smartIndent\': depth0,\'theme\': depth0,\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"ivy-codemirror\", options))));\n      data.buffer.push(\"\\n  </div>\\n\\n  <div class=\\\"col-sm-3\\\">\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label\\\" for=\\\"mode\\\">Mode</label>\\n      \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Select\", {hash:{\n        \'class\': (\"form-control\"),\n        \'content\': (\"modes\"),\n        \'id\': (\"mode\"),\n        \'value\': (\"mode\")\n      },hashTypes:{\'class\': \"STRING\",\'content\': \"ID\",\'id\': \"STRING\",\'value\': \"ID\"},hashContexts:{\'class\': depth0,\'content\': depth0,\'id\': depth0,\'value\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label\\\" for=\\\"theme\\\">Theme</label>\\n      \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Select\", {hash:{\n        \'class\': (\"form-control\"),\n        \'content\': (\"themes\"),\n        \'id\': (\"theme\"),\n        \'value\': (\"theme\")\n      },hashTypes:{\'class\': \"STRING\",\'content\': \"ID\",\'id\': \"STRING\",\'value\': \"ID\"},hashContexts:{\'class\': depth0,\'content\': depth0,\'id\': depth0,\'value\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n    </div>\\n\\n    <div class=\\\"checkbox\\\">\\n      <label>\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'checked\': (\"lineNumbers\"),\n        \'type\': (\"checkbox\")\n      },hashTypes:{\'checked\': \"ID\",\'type\': \"STRING\"},hashContexts:{\'checked\': depth0,\'type\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\" Line numbers\\n      </label>\\n    </div>\\n\\n    <div class=\\\"checkbox\\\">\\n      <label>\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'checked\': (\"lineWrapping\"),\n        \'type\': (\"checkbox\")\n      },hashTypes:{\'checked\': \"ID\",\'type\': \"STRING\"},hashContexts:{\'checked\': depth0,\'type\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\" Line wrapping\\n      </label>\\n    </div>\\n\\n    <div class=\\\"checkbox\\\">\\n      <label>\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'checked\': (\"readOnly\"),\n        \'type\': (\"checkbox\")\n      },hashTypes:{\'checked\': \"ID\",\'type\': \"STRING\"},hashContexts:{\'checked\': depth0,\'type\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\" Read-only\\n      </label>\\n    </div>\\n\\n    <div class=\\\"checkbox\\\">\\n      <label>\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'checked\': (\"smartIndent\"),\n        \'type\': (\"checkbox\")\n      },hashTypes:{\'checked\': \"ID\",\'type\': \"STRING\"},hashContexts:{\'checked\': depth0,\'type\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\" Smart indent\\n      </label>\\n    </div>\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/index.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/index.js should pass jshint\', function() { \n      ok(true, \'controllers/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/index.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/components/ivy-codemirror-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/components\');\n    test(\'dummy/tests/unit/components/ivy-codemirror-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/components/ivy-codemirror-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/components/ivy-codemirror-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/components/ivy-codemirror-test\", \n  [\"ember\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    /* global CodeMirror */\n    var Ember = __dependency1__[\"default\"];\n    var moduleForComponent = __dependency2__.moduleForComponent;\n    var test = __dependency2__.test;\n\n    moduleForComponent(\'ivy-codemirror\');\n\n    test(\'should update value property when CodeMirror changes\', function() {\n      var component = this.subject();\n      this.append();\n\n      var codeMirror = component.get(\'codeMirror\');\n\n      Ember.run(function() {\n        codeMirror.setValue(\'1 + 1\');\n        CodeMirror.signal(codeMirror, \'change\', codeMirror);\n      });\n\n      equal(component.get(\'value\'), \'1 + 1\', \'value is updated\');\n    });\n\n    test(\'should update CodeMirror value when value property is changed\', function() {\n      var component = this.subject();\n      this.append();\n\n      var codeMirror = component.get(\'codeMirror\');\n      equal(codeMirror.getValue(), \'\', \'precond - value is empty\');\n\n      Ember.run(function() {\n        component.set(\'value\', \'1 + 1\');\n      });\n\n      equal(codeMirror.getValue(), \'1 + 1\', \'value is updated\');\n    });\n\n    function optionTest(key, beforeValue, afterValue) {\n      test(\'should update CodeMirror \' + key + \' option when \' + key + \' property changes\', function() {\n        var component = this.subject();\n        this.append();\n\n        var codeMirror = component.get(\'codeMirror\');\n        equal(codeMirror.getOption(key), beforeValue,\n              \'precond - initial value of \' + key + \' option is correct\');\n\n        Ember.run(function() {\n          component.set(key, afterValue);\n        });\n\n        equal(codeMirror.getOption(key), afterValue,\n              key + \' option is updated after \' + key + \' property is changed\');\n      });\n\n      test(\'should update CodeMirror \' + key + \' option when bound to a property whose dependencies change\', function() {\n        var context = Ember.Object.createWithMixins({\n          actualValue: beforeValue,\n          computedValue: Ember.computed.readOnly(\'actualValue\')\n        });\n\n        var componentOptions = { foo: context };\n        componentOptions[key + \'Binding\'] = \'foo.computedValue\';\n        var component = this.subject(componentOptions);\n        this.append();\n\n        var codeMirror = component.get(\'codeMirror\');\n        equal(codeMirror.getOption(key), beforeValue,\n              \'precond - initial value of \' + key + \' option is correct\');\n\n        Ember.run(function() {\n          context.set(\'actualValue\', afterValue);\n        });\n\n        equal(codeMirror.getOption(key), afterValue,\n              key + \' option is updated after \' + key + \' property is changed\');\n      });\n    }\n\n    optionTest(\'autofocus\', false, true);\n    optionTest(\'coverGutterNextToScrollbar\', false, true);\n    optionTest(\'electricChars\', true, false);\n    optionTest(\'extraKeys\', null, \'basic\');\n    optionTest(\'firstLineNumber\', 1, 2);\n    optionTest(\'fixedGutter\', true, false);\n    optionTest(\'historyEventDelay\', 1250, 500);\n    optionTest(\'indentUnit\', 2, 4);\n    optionTest(\'indentWithTabs\', false, true);\n    optionTest(\'keyMap\', \'default\', \'basic\');\n    optionTest(\'lineNumbers\', false, true);\n    optionTest(\'lineWrapping\', false, true);\n    optionTest(\'mode\', null, \'ruby\');\n    optionTest(\'readOnly\', false, true);\n    optionTest(\'rtlMoveVisually\', true, false);\n    optionTest(\'showCursorWhenSelecting\', false, true);\n    optionTest(\'smartIndent\', true, false);\n    optionTest(\'tabSize\', 4, 2);\n    optionTest(\'tabindex\', null, 1);\n    optionTest(\'theme\', \'default\', \'twilight\');\n    optionTest(\'undoDepth\', 200, 100);\n\n    test(\'should refresh when isVisible becomes true\', function() {\n      var component = this.subject();\n      this.append();\n\n      var codeMirror = component.get(\'codeMirror\'),\n          refreshCalls = 0;\n\n      codeMirror.refresh = function() {\n        refreshCalls++;\n      };\n\n      Ember.run(function() {\n        component.set(\'isVisible\', false);\n      });\n      equal(refreshCalls, 0);\n\n      Ember.run(function() {\n        component.set(\'isVisible\', true);\n      });\n      equal(refreshCalls, 1);\n    });\n  });//# sourceURL=dummy/tests/unit/components/ivy-codemirror-test.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('dummy/tests/test-helper');
} else {
  require('dummy/app')['default'].create({"codeSample":"import CodeMirror from 'codemirror';\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  /**\n   * The value of the editor.\n   *\n   * @property value\n   * @type {String}\n   * @default null\n   */\n  value: null,\n\n  autofocus: false,\n  coverGutterNextToScrollbar: false,\n  electricChars: true,\n  extraKeys: null,\n  firstLineNumber: 1,\n  fixedGutter: true,\n  historyEventDelay: 1250,\n  indentUnit: 2,\n  indentWithTabs: false,\n  keyMap: 'default',\n  lineNumbers: false,\n  lineWrapping: false,\n  mode: null,\n  readOnly: false,\n  rtlMoveVisually: true,\n  showCursorWhenSelecting: false,\n  smartIndent: true,\n  tabSize: 4,\n  tabindex: null,\n  theme: 'default',\n  undoDepth: 200,\n\n  tagName: 'textarea',\n\n  /**\n   * Force CodeMirror to refresh.\n   *\n   * @method refresh\n   */\n  refresh: function() {\n    this.get('codeMirror').refresh();\n  },\n\n  _initCodemirror: Ember.on('didInsertElement', function() {\n    var codeMirror = CodeMirror.fromTextArea(this.get('element'));\n\n    // Stash away the CodeMirror instance.\n    this.set('codeMirror', codeMirror);\n\n    // Set up handlers for CodeMirror events.\n    this._bindCodeMirrorEvent('change', this, '_updateValue');\n\n    // Set up bindings for CodeMirror options.\n    this._bindCodeMirrorOption('autofocus');\n    this._bindCodeMirrorOption('coverGutterNextToScrollbar');\n    this._bindCodeMirrorOption('electricChars');\n    this._bindCodeMirrorOption('extraKeys');\n    this._bindCodeMirrorOption('firstLineNumber');\n    this._bindCodeMirrorOption('fixedGutter');\n    this._bindCodeMirrorOption('historyEventDelay');\n    this._bindCodeMirrorOption('indentUnit');\n    this._bindCodeMirrorOption('indentWithTabs');\n    this._bindCodeMirrorOption('keyMap');\n    this._bindCodeMirrorOption('lineNumbers');\n    this._bindCodeMirrorOption('lineWrapping');\n    this._bindCodeMirrorOption('mode');\n    this._bindCodeMirrorOption('readOnly');\n    this._bindCodeMirrorOption('rtlMoveVisually');\n    this._bindCodeMirrorOption('showCursorWhenSelecting');\n    this._bindCodeMirrorOption('smartIndent');\n    this._bindCodeMirrorOption('tabSize');\n    this._bindCodeMirrorOption('tabindex');\n    this._bindCodeMirrorOption('theme');\n    this._bindCodeMirrorOption('undoDepth');\n\n    this._bindCodeMirrorProperty('value', this, '_valueDidChange');\n    this._valueDidChange();\n\n    // Force a refresh on `becameVisible`, since CodeMirror won't render itself\n    // onto a hidden element.\n    this.on('becameVisible', this, 'refresh');\n  }),\n\n  /**\n   * Bind a handler for `event`, to be torn down in `willDestroyElement`.\n   *\n   * @private\n   * @method _bindCodeMirrorEvent\n   */\n  _bindCodeMirrorEvent: function(event, target, method) {\n    var callback = Ember.run.bind(target, method);\n\n    this.get('codeMirror').on(event, callback);\n\n    this.on('willDestroyElement', this, function() {\n      this.get('codeMirror').off(event, callback);\n    });\n  },\n\n  /**\n   * @private\n   * @method _bindCodeMirrorProperty\n   */\n  _bindCodeMirrorOption: function(key) {\n    this._bindCodeMirrorProperty(key, this, '_optionDidChange');\n\n    // Set the initial option synchronously.\n    this._optionDidChange(this, key);\n  },\n\n  /**\n   * Bind an observer on `key`, to be torn down in `willDestroyElement`.\n   *\n   * @private\n   * @method _bindCodeMirrorProperty\n   */\n  _bindCodeMirrorProperty: function(key, target, method) {\n    this.addObserver(key, target, method);\n\n    this.on('willDestroyElement', this, function() {\n      this.removeObserver(key, target, method);\n    });\n  },\n\n  /**\n   * Sync a local option value with CodeMirror.\n   *\n   * @private\n   * @method _optionDidChange\n   */\n  _optionDidChange: function(sender, key) {\n    this.get('codeMirror').setOption(key, this.get(key));\n  },\n\n  /**\n   * Update the `value` property when a CodeMirror `change` event occurs.\n   *\n   * @private\n   * @method _updateValue\n   */\n  _updateValue: function(instance) {\n    this.set('value', instance.getValue());\n  },\n\n  _valueDidChange: function() {\n    var codeMirror = this.get('codeMirror'),\n        value = this.get('value');\n\n    if (value !== codeMirror.getValue()) {\n      codeMirror.setValue(value || '');\n    }\n  }\n});\n","LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
